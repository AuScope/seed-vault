name: Release-PyPI

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Version bump type: patch, minor, or major"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Optional release notes"
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry==2.0.1

      - name: Bump version (locally, without committing yet)
        id: bump_version
        run: |
          poetry version ${{ github.event.inputs.release_type }}
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build the package
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish --no-interaction

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push version bump and tag (after successful publish)
        run: |
          VERSION=${{ steps.bump_version.outputs.version }}
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Release $VERSION"
          fi
          git add pyproject.toml
          git commit -m "chore(release): bump version to $VERSION"
          git tag -a v$VERSION -m "$RELEASE_NOTES"
          git push origin main
          git push origin v$VERSION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_version.outputs.version }}
          name: v${{ steps.bump_version.outputs.version }}
          body: ${{ github.event.inputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
