[SDS]
sds_path = {{ sds_path }}

[DATABASE]
# default is sds_path/database.sqlite
db_path = {{ db_path }}

[PROCESSING]
num_processes = {{ num_processes }}
gap_tolerance = {{ gap_tolerance }}
#download type can be continuous (default) or event
download_type = {{ download_type }}

# not in use yet TODO
[AUTH]
{% for auth in auths %}
{{ auth.nslc_code }} = {{ auth.username }}:{{ auth.password }}
{% endfor %}


[WAVEFORM]
#idea possibly that people can "rank" which client they want to use.. if no data on one, try the other. e.g. use iris-federator obspy.clients.fdsn.routing.routing_client.RoutingClient
client = {{ waveform.client }}
channel_pref = {{ waveform.channel_pref | join(',') }}
location_pref = {{ waveform.location_pref | join(',') }}

days_per_request = {{ waveform.days_per_request }}

[STATION]
# see: https://www.auspass.edu.au/fdsnws/station/1/builder

# an opportunity to use a different client than the default in WAVEFORM
client = {{ station.client }}

# if set, will get the stations defined solely by the contents of this inventory file
local_inventory = {{ station.local_inventory }}

# force-add these stations to the inventory at the same time (possibly outside of the search)
force_stations = {{ station.force_stations | join(',') }}
#similarly, often we don't want some stations regardless of anything
exclude_stations = {{ station.exclude_stations | join(',') }}


# year,month,day,hour,min,sec,microsecond, or YYYYDOY, or a datetime string, any format obspy accepts
starttime = {{ station.starttime }}
endtime = {{ station.endtime }}
startbefore = {{ station.startbefore }}
startafter = {{ station.startafter }}
endbefore = {{ station.endbefore }}
endafter = {{ station.endafter }}

network = {{ station.network }}
station = {{ station.station }}
location = {{ station.location }}
channel = {{ station.channel }}

# can be 'bounding' or 'circle' or anything else (e.g. neither) to avoid 
geo_constraint = {{ station.geo_constraint }}

{%- if station.geo_constraint and station.geo_constraint[0] %}
{%- if station.geo_constraint[0].geo_type == 'bounding' %}
# if geo_constraint == "bounding"
minlatitude = {{ station.geo_constraint[0].coords.min_lat }}
maxlatitude = {{ station.geo_constraint[0].coords.max_lat }}
minlongitude = {{ station.geo_constraint[0].coords.min_lng }}
maxlongitude = {{ station.geo_constraint[0].coords.max_lng }}
{%- elif station.geo_constraint[0].geo_type == 'circle' %}
# if geo_constraint == "circle"
latitude = {{ station.geo_constraint[0].coords.lat }}
longitude = {{ station.geo_constraint[0].coords.lng }}
minsearchradius = {{ station.geo_constraint[0].coords.min_radius }}
maxsearchradius = {{ station.geo_constraint[0].coords.max_radius }}
{%- endif %}
{%- endif %}

# don't change. if you are searching a network in [AUTH] it will change this flag
includerestricted = {{ station.includerestricted }}
level = {{ station.level }}

[EVENT]
# see: https://www.auspass.edu.au/fdsnws/event/1/builder

# an opportunity to use a different client than the default in FDSN
# client = USGS
client = {{ event.client }}
model = {{ event.model }}
before_p_sec = {{ event.before_p_sec }}
after_p_sec = {{ event.after_p_sec }}
starttime = {{ event.starttime }}
endtime = {{ event.endtime }}
min_depth = {{ event.min_depth }}
max_depth = {{ event.max_depth }}
minmagnitude = {{ event.minmagnitude }}
maxmagnitude = {{ event.maxmagnitude }}

# These are relative to the individual stations
minradius = {{ event.minradius }}
maxradius = {{ event.maxradius }}


local_catalog = {{ event.local_catalog }}


# 'radial' or 'box'. it would be nice if there was a way to auto-detect
geo_constraint = {{ event.geo_constraint }}

{%- if event.geo_constraint and event.geo_constraint[0] %}
{%- if event.geo_constraint[0].geo_type == 'bounding' %}
# bounding box (somewhat rare, especially for this type of work)
minlatitude = {{ event.geo_constraint[0].coords.min_lat }}
maxlatitude = {{ event.geo_constraint[0].coords.max_lat }}
minlongitude = {{ event.geo_constraint[0].coords.min_lng }}
maxlongitude = {{ event.geo_constraint[0].coords.max_lng }}
{%- elif event.geo_constraint[0].geo_type == 'circle' %}
# radial searches (MUCH more common for events)
latitude = {{ event.geo_constraint[0].coords.lat }}
longitude = {{ event.geo_constraint[0].coords.lng }}
minsearchradius = {{ event.geo_constraint[0].coords.min_radius }}
maxsearchradius = {{ event.geo_constraint[0].coords.max_radius }}
{%- endif %}
{%- endif %}

# shouldn't want these if you're just getting waveform data around an event
# the defaults are "None" which I guess is false?
includeallorigins = {{ event.includeallorigins }}
includeallmagnitudes = {{ event.includeallmagnitudes }}
includearrivals = {{ event.includearrivals }}

limit = {{ event.limit }}
offset = {{ event.offset }}

contributor = {{ event.contributor }}
updatedafter = {{ event.updatedafter }}
